import { baseSchemaId, baseSchemaCreatedAt, baseSchemaUpdatedAt, dbString, zodString, zodMediumText, dbEnum, dbBoolean, dbMediumText, zodText, dbRelation, dbDateTime, dbTimestamp, dbInt, dbJson, zodNumber, zodJsonObject } from '../helpers.mjs';

export const hardwareTicketSchema = {
    kind: 'HardwareTicket',
    tableName: 'hardwaretickets',
    owner: ['admin', 'maintenanceManager', 'productionManager'],
    props: [
        ...baseSchemaProps,
        {
            type: "string",
            name: "description",
            required: true,
            filterQuery: true,
            length: 16777215,
            default: '',
            db: (prop) => dbMediumText(prop),
            zod: (prop) => zodMediumText(prop),
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "enum",
            name: 'type',
            required: true,
            filterQualifier: true,
            default: 'routine',
            db: (prop) => dbEnum(prop),
            enums: ['routine', 'needs_help'],
            enumLabels: ['Routine', 'Needs Help'],
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "enum",
            name: 'severity',
            required: true,
            filterQualifier: true,
            default: 'working',
            db: (prop) => dbEnum(prop),
            enums: ['working', 'intermittent', 'down'],
            enumLabels: ['Working', 'Intermittent', 'Down'],
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "enum",
            name: 'status',
            required: true,
            filterQualifier: true,
            default: 'unresolved',
            db: (prop) => dbEnum(prop),
            enums: ['resolved', 'unresolved'],
            enumLabels: ['Resolved', 'Unresolved'],
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "int",
            name: "resolutionMinutes",
            required: false,
            default: 0,
            db: (prop) => dbInt(prop),
            zod: (prop) => zodNumber(prop).positive(),
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "string",
            name: "submittedBy",
            required: true,
            filterQualifier: true,
            default: '',
            length: 64,
            db: (prop) => dbString(prop),
            zod: (prop) => zodString(prop),
            view: ['owner'],
            edit: ['owner'],
        },

        // 1:N relationship - aka a relationship to my children
        {
            type: "virtual",
            name: 'hardwareTicketId', // the name of this record's id in the remote table
            required: false,
            view: ['owner'],
            edit: [],
            default: undefined,
            relation: {
                type: 'child',
                name: 'remarks',
                kind: 'HardwareTicketRemark',
            },
        },
        {
            type: "virtual",
            name: 'hardwareTicketId', // the name of this record's id in the remote table
            required: false,
            view: ['owner'],
            edit: [],
            default: undefined,
            relation: {
                type: 'child',
                name: 'files',
                kind: 'HardwareTicketFile',
            },
        },
        {
            type: "id",
            name: 'hardwareTaskId', // the name of the remote record's id in this table
            required: true,
            filterQualifier: true,
            db: (prop) => dbRelation(prop),
            relation: {
                type: 'parent',
                name: 'task',
                kind: 'HardwareTask',
                skipOwnerCheck: true,
            },
            default: undefined,
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "id",
            name: 'hardwareItemId', // the name of the remote record's id in this table
            required: true,
            filterQualifier: true,
            db: (prop) => dbRelation(prop),
            relation: {
                type: 'parent',
                name: 'item',
                kind: 'HardwareItem',
                skipOwnerCheck: true,
            },
            default: undefined,
            view: ['owner'],
            edit: ['owner'],
        },
        {
            type: "string",
            name: "claimedBy",
            default: '',
            required: false,
            length: 64,
            db: (prop) => dbString(prop),
            zod: (prop) => zodString(prop),
            view: ['public'],
            edit: ['owner'],
        },
    ],
};